package com.lucia.clublingua.chatroom;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
@SpringBootTest
class ChatRoomServiceTest {

    @Mock
    private ChatRoomRepository chatRoomRepository;

    @InjectMocks
    private ChatRoomService chatRoomService;

    @Test
    void testGetChatRoomIdExistingRoom() {
        // Arrange
        String senderId = "senderId";
        String recipientId = "recipientId";
        String expectedChatId = "existingChatId";

        ChatRoom existingChatRoom = ChatRoom.builder()
                .id("65a2fa20ca2606415f9cc300")
                .chatId(expectedChatId)
                .senderId(senderId)
                .recipientId(recipientId)
                .build();

        Mockito.when(chatRoomRepository.findBySenderIdAndRecipientId(senderId, recipientId))
                .thenReturn(Optional.of(existingChatRoom));

        // Act
        Optional<String> result = chatRoomService.getChatRoomId(senderId, recipientId, false);

        // Assert
        assertEquals(Optional.of(expectedChatId), result);
    }

    @Test
    void testGetChatRoomIdNewRoom() {
        // Arrange
        String senderId = "senderId";
        String recipientId = "recipientId";

        Mockito.when(chatRoomRepository.findBySenderIdAndRecipientId(senderId, recipientId))
                .thenReturn(Optional.empty());

        // Mock the behavior of save to return a ChatRoom with a generated ID
        Mockito.when(chatRoomRepository.save(Mockito.any(ChatRoom.class)))
                .thenAnswer(invocation -> {
                    ChatRoom savedChatRoom = invocation.getArgument(0);
                    // Assuming ChatRoom has an ID generated by the database
                    savedChatRoom.setId("generatedId");
                    return savedChatRoom;
                });

        // Act
        Optional<String> result = chatRoomService.getChatRoomId(senderId, recipientId, true);

        // Assert
        assertNotNull(result.orElse(null));
    }
}